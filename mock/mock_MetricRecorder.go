// Code generated by MockGen. DO NOT EDIT.
// Source: ./o11y/o11y.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMetricRecorder is a mock of MetricRecorder interface
type MockMetricRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricRecorderMockRecorder
}

// MockMetricRecorderMockRecorder is the mock recorder for MockMetricRecorder
type MockMetricRecorderMockRecorder struct {
	mock *MockMetricRecorder
}

// NewMockMetricRecorder creates a new mock instance
func NewMockMetricRecorder(ctrl *gomock.Controller) *MockMetricRecorder {
	mock := &MockMetricRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricRecorder) EXPECT() *MockMetricRecorderMockRecorder {
	return m.recorder
}

// IncreasePushLogSuccess mocks base method
func (m *MockMetricRecorder) IncreasePushLogSuccess(appGroup string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreasePushLogSuccess", appGroup)
}

// IncreasePushLogSuccess indicates an expected call of IncreasePushLogSuccess
func (mr *MockMetricRecorderMockRecorder) IncreasePushLogSuccess(appGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreasePushLogSuccess", reflect.TypeOf((*MockMetricRecorder)(nil).IncreasePushLogSuccess), appGroup)
}

// IncreasePushLogFailed mocks base method
func (m *MockMetricRecorder) IncreasePushLogFailed(appGroup string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreasePushLogFailed", appGroup)
}

// IncreasePushLogFailed indicates an expected call of IncreasePushLogFailed
func (mr *MockMetricRecorderMockRecorder) IncreasePushLogFailed(appGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreasePushLogFailed", reflect.TypeOf((*MockMetricRecorder)(nil).IncreasePushLogFailed), appGroup)
}

// IncreaseProbeElasticSearchSuccess mocks base method
func (m *MockMetricRecorder) IncreaseProbeElasticSearchSuccess(appGroup string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProbeElasticSearchSuccess", appGroup)
}

// IncreaseProbeElasticSearchSuccess indicates an expected call of IncreaseProbeElasticSearchSuccess
func (mr *MockMetricRecorderMockRecorder) IncreaseProbeElasticSearchSuccess(appGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProbeElasticSearchSuccess", reflect.TypeOf((*MockMetricRecorder)(nil).IncreaseProbeElasticSearchSuccess), appGroup)
}

// IncreaseProbeElasticSearchFailed mocks base method
func (m *MockMetricRecorder) IncreaseProbeElasticSearchFailed(appGroup, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProbeElasticSearchFailed", appGroup, reason)
}

// IncreaseProbeElasticSearchFailed indicates an expected call of IncreaseProbeElasticSearchFailed
func (mr *MockMetricRecorderMockRecorder) IncreaseProbeElasticSearchFailed(appGroup, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProbeElasticSearchFailed", reflect.TypeOf((*MockMetricRecorder)(nil).IncreaseProbeElasticSearchFailed), appGroup, reason)
}

// IncreaseProbeKibanaSuccess mocks base method
func (m *MockMetricRecorder) IncreaseProbeKibanaSuccess(appGroup string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProbeKibanaSuccess", appGroup)
}

// IncreaseProbeKibanaSuccess indicates an expected call of IncreaseProbeKibanaSuccess
func (mr *MockMetricRecorderMockRecorder) IncreaseProbeKibanaSuccess(appGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProbeKibanaSuccess", reflect.TypeOf((*MockMetricRecorder)(nil).IncreaseProbeKibanaSuccess), appGroup)
}

// IncreaseProbeKibanaFailed mocks base method
func (m *MockMetricRecorder) IncreaseProbeKibanaFailed(appGroup, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseProbeKibanaFailed", appGroup, reason)
}

// IncreaseProbeKibanaFailed indicates an expected call of IncreaseProbeKibanaFailed
func (mr *MockMetricRecorderMockRecorder) IncreaseProbeKibanaFailed(appGroup, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseProbeKibanaFailed", reflect.TypeOf((*MockMetricRecorder)(nil).IncreaseProbeKibanaFailed), appGroup, reason)
}

// SetProbeElasticsearchDelay mocks base method
func (m *MockMetricRecorder) SetProbeElasticsearchDelay(appGroup string, delaySecond float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProbeElasticsearchDelay", appGroup, delaySecond)
}

// SetProbeElasticsearchDelay indicates an expected call of SetProbeElasticsearchDelay
func (mr *MockMetricRecorderMockRecorder) SetProbeElasticsearchDelay(appGroup, delaySecond interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProbeElasticsearchDelay", reflect.TypeOf((*MockMetricRecorder)(nil).SetProbeElasticsearchDelay), appGroup, delaySecond)
}
